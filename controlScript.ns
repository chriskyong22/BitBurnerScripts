import {getRootServers} from "getServers.ns"

/** @param {NS} ns **/
export async function main(ns) {
    let file = ns.args[0];
	if (file.endsWith(".ns")) {
		ns.exit();
	}
	let servers = await getRootServers(ns);
	let data = [];
	for (const server of servers) {
		if (ns.getServerMaxMoney(server) == 0) {
			continue;
		}
		
		data.push({
			"hostname" : server,
			"growth" : ns.getServerGrowth(server),
			"requiredSkill" : ns.getServerRequiredHackingLevel(server),
			"maxMoney" : ns.getServerMaxMoney(server), 
			"minSecurityLevel" : ns.getServerMinSecurityLevel(server),
			"hack-time" : ns.getHackTime(server), 
			"grow-time" : ns.getGrowTime(server), 
			"weaken-time" : ns.getWeakenTime(server)
		})
	}

	/**
	 * 0.3125 H to 1 G 
	 * 0.25 H to 1 W
	 * 0.8 G to 1 W
	 */

	data.sort((server1, server2) => {
		if (server1["requiredSkill"] < server2["requiredSkill"]) {
			return -1;
		} else if (server1["requiredSkill"] === server2["requiredSkill"]) {
			return 0;
		} else {
			return 1;
		}
	})
	
	await ns.write(file, JSON.stringify(data, null, 2), "w");
	
	let csv = "";
	for (const serverInfo of data) {
		let commaSeperate = "";
		for (const key in serverInfo) {
			commaSeperate = commaSeperate + serverInfo[key] + ",";
		}
		commaSeperate = commaSeperate.substr(0, commaSeperate.length - 1) + "\n";
		csv += commaSeperate;
	}
	await ns.write("control.csv", csv, "w");
}

function millisToMinutesAndSeconds(millis) {
  var minutes = Math.floor(millis / 60000);
  var seconds = ((millis % 60000) / 1000).toFixed(0);
  return (
		seconds == 60 ?
		(minutes+1) + ":00" :
		minutes + ":" + (seconds < 10 ? "0" : "") + seconds
	);
}